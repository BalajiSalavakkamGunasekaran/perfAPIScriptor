// Generate LoadRunner script from the unified API data format
export function generateLoadRunnerScript(apiData) {
    const testName = apiData.info?.name || "API_Test";
    const thinkTime = apiData.options?.thinkTime || 1;
    const addAssertions = apiData.options?.addAssertions || true;
    
    // Start generating the LoadRunner C script
    let script = `
  /////////////////////////////////////////////////////////////////////////////
  // LoadRunner Script for ${testName}
  // Generated by perfAPIScriptor
  /////////////////////////////////////////////////////////////////////////////
  
  #include "lrun.h"
  #include "web_api.h"
  
  // Global variables
  char *baseUrl = "";
  
  // Action declarations
  Action();
  
  // vuser_init - called at the beginning of the test
  vuser_init() {
      lr_start_transaction("vuser_init");
      
      // Initialize global variables and settings
      web_set_sockets_option("SSL_VERSION", "AUTO");
      web_set_user("", "", "");
      
      lr_end_transaction("vuser_init", LR_AUTO);
      return 0;
  }
  
  // Action - main transaction function
  Action() {
      int i;
      lr_start_transaction("Action");
  `;
  
    // Add each endpoint as a LoadRunner web_custom_request
    if (apiData.endpoints && Array.isArray(apiData.endpoints)) {
      apiData.endpoints.forEach((endpoint, index) => {
        const requestName = endpoint.name || `${endpoint.method} ${endpoint.path}`;
        const url = endpoint.path;
        const method = endpoint.method;
        
        script += `
      // Transaction: ${requestName}
      lr_start_transaction("${requestName.replace(/[^a-zA-Z0-9_]/g, '_')}");
  `;
  
        // Add think time if enabled
        if (thinkTime > 0) {
          script += `    lr_think_time(${thinkTime});\n`;
        }
  
        script += `
      web_custom_request("${requestName.replace(/[^a-zA-Z0-9_]/g, '_')}",
          "URL=${url}",
          "Method=${method}",`;
  
        // Add headers if present
        if (endpoint.headers && Object.keys(endpoint.headers).length > 0) {
          script += `
          "HeaderFile=headers_${index}.txt",`;
          
          // We would normally write these headers to a file, but in this context, 
          // we'll just include them as a comment for reference
          script += `
          /* Headers:
  `;
          Object.entries(endpoint.headers).forEach(([key, value]) => {
            script += `        ${key}: ${value}\n`;
          });
          script += `        */`;
        }
  
        // Add body if present
        if (endpoint.body) {
          if (typeof endpoint.body === 'object') {
            const bodyStr = JSON.stringify(endpoint.body, null, 2);
            script += `
          "Body=${bodyStr.replace(/"/g, '\\"')}",`;
          } else if (typeof endpoint.body === 'string') {
            script += `
          "Body=${endpoint.body.replace(/"/g, '\\"')}",`;
          }
        }
  
        // Complete the web_custom_request
        script += `
          "LAST");
  `;
  
        // Add assertions if enabled
        if (addAssertions) {
          script += `
      // Check status code
      if (atoi(lr_eval_string("{last_status_code}")) != 200) {
          lr_error_message("Request failed with status code %s", lr_eval_string("{last_status_code}"));
          lr_end_transaction("${requestName.replace(/[^a-zA-Z0-9_]/g, '_')}", LR_FAIL);
      } else {
          lr_end_transaction("${requestName.replace(/[^a-zA-Z0-9_]/g, '_')}", LR_PASS);
      }
  `;
        } else {
          script += `
      lr_end_transaction("${requestName.replace(/[^a-zA-Z0-9_]/g, '_')}", LR_AUTO);
  `;
        }
      });
    }
  
    // Close the Action function and add vuser_end
    script += `
      lr_end_transaction("Action", LR_AUTO);
      return 0;
  }
  
  // vuser_end - called at the end of the test
  vuser_end() {
      lr_start_transaction("vuser_end");
      
      // Clean up resources
      
      lr_end_transaction("vuser_end", LR_AUTO);
      return 0;
  }
  `;
  
    return script;
  }